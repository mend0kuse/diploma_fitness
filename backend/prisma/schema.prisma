generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  role     String
  password String
  profile  Profile?

  chatMessages ChatMessage[]
  chats        ChatOnUser[]

  trainerWorkouts Workout[]

  orders WorkoutOrder[]
}

model Profile {
  id      Int     @id @default(autoincrement())
  userId  Int?    @unique
  name    String?
  age     String?
  avatar  String?
  country String?
  user    User?   @relation(fields: [userId], references: [id])
}

model Chat {
  id Int @id @default(autoincrement())

  messages ChatMessage[]
  users    ChatOnUser[]
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  message String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?
}

model Workout {
  id Int @id @default(autoincrement())

  trainer   User @relation(fields: [trainerId], references: [id])
  trainerId Int

  title       String
  description String
  sportType   String

  maxPlaces Int

  dateStart       DateTime
  durationMinutes Int

  orders WorkoutOrder[]
}

model ChatOnUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  @@id([userId, chatId])
}

model WorkoutOrder {
  id Int @id @default(autoincrement())

  client   User @relation(fields: [clientId], references: [id])
  clientId Int

  status String

  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int
}
