generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Payment {
  id       String @id
  order_id String
  ticketId Int

  status      String
  paid        Boolean
  description String
  value       String
  currency    String

  createdAt     DateTime  @default(now())
  expiresAt     DateTime
  freezeEndDate DateTime?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  role     String
  password String
  profile  Profile?

  chatMessages ChatMessage[]
  chats        ChatOnUser[]

  trainerWorkouts Workout[]

  orders WorkoutOrder[]

  payments      Payment[]
  myReviews     TrainerReview[] @relation(name: "my")
  leavedReviews TrainerReview[] @relation(name: "leaved")
}

model TrainerReview {
  id Int @id @default(autoincrement())

  rating       Int
  text         String  @db.LongText
  isHiddenUser Boolean

  user   User? @relation(fields: [userId], references: [id], name: "my")
  userId Int?

  author   User? @relation(fields: [authorId], references: [id], name: "leaved")
  authorId Int?
}

model Profile {
  id     Int     @id @default(autoincrement())
  userId Int?    @unique
  name   String?
  status String? @db.LongText
  avatar String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Chat {
  id Int @id @default(autoincrement())

  messages ChatMessage[]
  users    ChatOnUser[]
}

model ChatMessage {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now())
  seenAt    DateTime?

  message String @db.LongText

  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?
}

model Workout {
  id Int @id @default(autoincrement())

  trainer   User @relation(fields: [trainerId], references: [id])
  trainerId Int

  title       String
  description String @db.LongText
  sportType   String
  status      String

  maxPlaces Int

  dateStart       DateTime
  durationMinutes Int

  orders WorkoutOrder[]
}

model ChatOnUser {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  @@id([userId, chatId])
}

model WorkoutOrder {
  id Int @id @default(autoincrement())

  client   User @relation(fields: [clientId], references: [id])
  clientId Int

  status String

  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int
}
